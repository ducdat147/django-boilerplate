name: "django-boilerplate"

services:
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - 80:80
      - 5555:5555
      - 15672:15672
      - 3000:3000
    volumes:
      - ./docker/devops/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./media:/app/media
    depends_on:
      - server
      - celery_flower
      - celery_beat
      - celery_worker
      - grafana
    networks:
      - local-networks

  server: &service
    container_name: server
    build:
      context: .
      dockerfile: docker/django/Dockerfile
    command: /start-service
    volumes:
      - server_data:/app
    env_file:
      - .docker.env
    networks:
      - local-networks
    depends_on:
      - database
      - redis
      - rabbitmq

  celery_worker:
    <<: *service
    container_name: celery_worker
    command: /start-celeryworker
    # ports: []

  celery_beat:
    <<: *service
    container_name: celery_beat
    command: /start-celerybeat
    # ports: []

  celery_flower:
    <<: *service
    container_name: celery_flower
    command: /start-celeryflower
    # ports:
    #   - 5555:5555

  database:
    container_name: database
    image: postgres
    volumes:
      - database_data:/var/lib/postgresql/data
    env_file:
      - .docker.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - local-networks

  redis:
    container_name: redis
    image: redis:latest
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - local-networks

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    env_file:
      - .docker.env
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - local-networks

  loki:
    container_name: loki
    image: grafana/loki
    volumes:
      - ./docker/devops/loki/loki.yaml:/etc/loki/loki.yaml
    command: -config.file=/etc/loki/loki.yaml
    networks:
      - local-networks

  promtail:
    container_name: promtail
    image: grafana/promtail
    volumes:
      - ./docker/devops/promtail/docker-config.yaml:/etc/promtail/docker-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - loki
    networks:
      - local-networks

  tempo:
    container_name: tempo
    image: grafana/tempo
    volumes:
      - ./docker/devops/tempo/tempo-local.yaml:/etc/tempo-local.yaml
    command: ["-config.file=/etc/tempo-local.yaml"]
    networks:
      - local-networks

  grafana:
    container_name: grafana
    image: grafana/grafana:9.5.2
    volumes:
      - ./docker/devops/grafana/datasources/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    depends_on:
      - loki
      - tempo
    networks:
      - local-networks

networks:
  local-networks:
    name: local-networks

volumes:
  server_data:
    name: server_data
  rabbitmq_data:
    name: rabbitmq_data
  redis_data:
    name: redis_data
  database_data:
    name: database_data
